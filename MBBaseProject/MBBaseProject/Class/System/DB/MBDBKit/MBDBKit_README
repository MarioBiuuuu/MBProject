#MBDBKit

## 1. 使用方法

```
导入源码
声明一个继承于LKDBObject的类对象
```

## 2. 示例

#####  1. 声明一个类，这里新建类User
```
#import "LKDBObject.h"
#import "LKDBQueue.h"
#import "LKDB.h"

@interface User : LKDBObject

@property (strong, nonatomic) NSString *name;
@property (assign, nonatomic) NSInteger age;
@property (strong, nonatomic) NSNumber *sex;
@property (assign, nonatomic) NSTimeInterval time;
@property (assign, nonatomic) int _id;

@end
```
#####  2. 插入到数据库
```
方式一：
LKDBQueue *dbQueue = [LKDBQueue dbWithPath:@"LKDB_test/test_queue.sqlite"];
[dbQueue execute:^(LKDB *db) {
User *user = [[User alloc] initWithPrimaryValue:8];
user.name = @"aaa";
[db insertDbObject:user];
}];
方式二：
LKDBQueue *dbQueue = [LKDBQueue dbWithPath:@"LKDB_test/test_queue.sqlite"];
[dbQueue execute:^(LKDB *db) {
User *user = [[User alloc] initWithPrimaryValue:8];
user.name = @"aaa";
[user insertToDb:db];
}];
方式三：
LKDBQueue *dbQueue = [LKDBQueue dbWithPath:@"LKDB_test/test_queue.sqlite"];
[dbQueue execute:^(LKDB *db) {
[db executeUpdate:@"insert into User(?) values(?)" dictionaryArgs:@{@"name" : @"aaa"}];
}];

```
#####  3. 查询
```
// 取出所有用户
方式一：
NSArray *users = [User allDbObjects];
方式二：
[dbQueue execute:^(LKDB *db) {
[db executeQuery:@"select * from User" resultBlock:^(NSArray *resultArray) {
NSLog(@"%@", resultArray);
}];
}];

// 按条件取出数据
NSArray *users = [User dbObjectsWhere:@"_id=11" orderby:nil];

```
#####  4. 修改
```
// 首先从数据库中取出要修改的对象
方式一：
NSArray *users = [User dbObjectsWhere:@"_id=11" orderby:nil];
if ([users count] > 0) {
User *user = users[0];
user.name = @"学长";
// 更新到数据库
[user updateToDb];
}
方式二：
[dbQueue execute:^(LKDB *db) {
[user updateToDb:db];
}];
```
#####  5. 删除
```
// 要删除的数据
方式一：
User *user = _users[row];
// 从数据库中删除数据
[user removeFromDb];
方式二：
[dbQueue execute:^(LKDB *db) {
[db executeQuery:@"delete from User where __id__=8"];
}];
}];
// 批量删除
[User removeDbObjectsWhere:@"_id=%d", 4];
```
**注意：** *一旦修改了数据类，请删除原来的应用重新运行。本项目内置了日期相关方法，详情参见*
